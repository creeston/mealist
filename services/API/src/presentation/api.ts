/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/menus": {
    /** Get all menus */
    get: {
      responses: {
        /** @description A list of menus */
        200: {
          content: {
            "application/json": components["schemas"]["Menu"][];
          };
        };
      };
    };
    /** Create a menu */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateMenuRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["Menu"];
          };
        };
      };
    };
  };
  "/menus/{menuId}": {
    /** Get a menu by ID */
    get: {
      parameters: {
        path: {
          menuId: string;
        };
      };
      responses: {
        /** @description A menu */
        200: {
          content: {
            "application/json": components["schemas"]["Menu"];
          };
        };
      };
    };
    /** Update a menu */
    put: {
      parameters: {
        path: {
          menuId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Menu"];
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: {
            "application/json": components["schemas"]["Menu"];
          };
        };
      };
    };
    /** Delete a menu */
    delete: {
      parameters: {
        path: {
          menuId: string;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
  };
  "/restaurants": {
    /** Get all restaurants */
    get: {
      responses: {
        /** @description A list of restaurants */
        200: {
          content: {
            "application/json": components["schemas"]["Restaurant"][];
          };
        };
      };
    };
    /** Create a restaurant */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["Restaurant"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["Restaurant"];
          };
        };
      };
    };
  };
  "/restaurants/{restaurantId}": {
    /** Get a restaurant by ID */
    get: {
      parameters: {
        path: {
          restaurantId: string;
        };
      };
      responses: {
        /** @description A restaurant */
        200: {
          content: {
            "application/json": components["schemas"]["Restaurant"];
          };
        };
      };
    };
    /** Update a restaurant */
    put: {
      parameters: {
        path: {
          restaurantId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Restaurant"];
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: {
            "application/json": components["schemas"]["Restaurant"];
          };
        };
      };
    };
    /** Delete a restaurant */
    delete: {
      parameters: {
        path: {
          restaurantId: string;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
  };
  "/qrmenus": {
    /** Get all qr menus */
    get: {
      responses: {
        /** @description A list of qr menus */
        200: {
          content: {
            "application/json": components["schemas"]["QrMenu"][];
          };
        };
      };
    };
    /** Create a qr menu */
    post: {
      requestBody: {
        content: {
          "multipart/form-data": {
            /** Format: binary */
            file?: string;
            createRequest?: components["schemas"]["CreateQrMenuRequest"];
          };
          "application/json": components["schemas"]["CreateQrMenuRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["QrMenu"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Restaurant: {
      id?: string;
      name: string;
      address: string;
      city: string;
      description?: string;
      wifiName?: string;
      wifiPassword?: string;
      instagramUrl?: string;
      vkUrl?: string;
      facebookUrl?: string;
      tripAdvisorUrl?: string;
    };
    CreateMenuRequest: {
      name?: string;
      /** @enum {string} */
      language?: "eng" | "rus" | "ukr" | "bel" | "pol" | "deu";
      /** Format: binary */
      file: string;
    };
    Menu: {
      id?: string;
      name: string;
      /** @enum {string} */
      status?: "NOT_PARSED" | "PARSING_IN_PROGRESS" | "PARSING_FAILED" | "PARSING_COMPLETED" | "OCR_IN_PROGRESS" | "OCR_FAILED" | "OCR_COMPLETED" | "REVIEWED";
      dishesCount?: number;
      originalFileUrl?: string;
      stopColor?: string;
      stopStyle?: string;
      /** Format: date-time */
      creationDate?: string;
      /** Format: date-time */
      modificationDate?: string;
      pages?: components["schemas"]["MenuPage"][];
    };
    MenuPage: {
      pageNumber: number;
      imageUrl: string;
      markup?: components["schemas"]["MenuLine"][];
    };
    MenuLine: {
      text?: string;
      x1: number;
      y1: number;
      x2: number;
      y2: number;
    };
    Code: {
      menuId: number;
    };
    ReadOnlyQrMenu: {
      title?: string;
      restaurant: components["schemas"]["Restaurant"];
      sectionsToShow: string[];
      style: components["schemas"]["QrMenuStyle"];
      loadingPlaceholderUrl: string;
      menus: components["schemas"]["ReadonlyQrMenuItem"][];
    };
    QrMenu: {
      id: string;
      name: string;
      urlSuffix: string;
      title?: string;
      restaurant: components["schemas"]["Restaurant"];
      sectionsToShow: string[];
      style: components["schemas"]["QrMenuStyle"];
      scanCount?: number;
      loadingPlaceholderMenuIndex?: number;
      loadingPlaceholderUrl: string;
      menus: components["schemas"]["QrMenuItem"][];
      /** Format: date-time */
      creationDate: string;
      /** Format: date-time */
      modificationDate?: string;
    };
    QrMenuItem: {
      stopColor?: string;
      stopStyle?: string;
      title?: string;
      menu?: components["schemas"]["Menu"];
    };
    ReadonlyQrMenuItem: {
      stopColor?: string;
      stopStyle?: string;
      title?: string;
      pages?: components["schemas"]["MenuPage"][];
    };
    QrMenuStyle: {
      headerColor?: string;
      actionsColor?: string;
      fontColor?: string;
      backgroundColor?: string;
    };
    CreateQrMenuRequest: {
      name: string;
      urlSuffix: string;
      title?: string;
      restaurantId: string;
      sectionsToShow: string[];
      style: components["schemas"]["QrMenuStyle"];
      loadingPlaceholder: components["schemas"]["CreateLoadingPlaceholderRequest"];
      menus: components["schemas"]["CreateQrMenuItem"][];
    };
    CreateLoadingPlaceholderRequest: {
      menuIndex?: number;
    };
    CreateQrMenuItem: {
      title: string;
      menuId: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
